<?php
/**
 * @file
 * db_api.module
 */

/*****************************************************************************
 * Private helper functions.
 *****************************************************************************/

/**
 * Remove an entire preg_match string from a string.
 *
 * @param string $string
 *   The string to remove match from, passed by reference.
 * @param array $matches
 *   The matches from preg_match.
 * @param string $replace
 *   The string to replace match with.
 */
function _db_api_replace_preg_match(&$string, array $matches, $replace = '') {
  $string = preg_replace('/' . preg_quote($matches[0], '/') . '/Us', $replace, $string);
}

/**
 * Retrieves the active API docblock object.
 *
 * @return object|void
 *   The active API docblock object or NULL if not an API page.
 */
function _db_api_active_item() {
  static $item;
  if (!isset($item)) {
    if ($item = menu_get_object('api_item', 4)) {
      if ($item->object_type === 'group') {
        $query = db_select('api_reference_storage', 'r');
        $results = $query
          ->fields('r')
          ->condition('r.from_did', $item->did)
          ->execute()
          ->fetchAllAssoc('from_did');
        $item->subgroup = !empty($results);
      }
    }
    elseif ($item = menu_get_object('api_filename', 2)) {
      // Just return the item.
    }
    elseif (($branch = api_get_active_branch()) && (current_path() === "api/$branch->project" || current_path() === "api/$branch->project/$branch->branch_name")) {
      $item = db_select('api_documentation', 'd')
        ->fields('d')
        ->condition('branch_id', $branch->branch_id)
        ->condition('object_type', 'mainpage')
        ->execute()
        ->fetchObject();
      if ($item) {
        api_set_html_page_title(check_plain($item->title));
      }
    }
    else {
      $item = FALSE;
    }
  }
  return $item;
}

/**
 * Re-formats the source "code" for API templates.
 *
 * Unfortunately the API module does not add links to the source code when it
 * is saved to the database. This is likely due to reducing the parse execution
 * time. This means that they are added during runtime and must be extracted
 * here in the theme.
 *
 * @param object $object
 *   The docblock object.
 * @param string $code
 *   The source code.
 * @param bool $panel
 *   Toggle determining whether or not to show the code in a collapsible panel.
 *
 * @return string
 *   The re-formatted source code.
 */
function _db_api_display_code($object, $code, $panel = TRUE) {
  // Remove existing wrappers.
  $code = preg_replace('/^\s*<pre[^>]*><code[^>]*>/', '', $code);
  $code = preg_replace('/<\/code><\/pre>\s*$/', '', $code);

  // Determine the code language from the filename.
  $parts = explode('.', $object->file_name);
  $ext = array_pop($parts);
  switch ($ext) {
    case 'markdown':
    case 'md':
      $lang = 'markdown';
      break;

    case 'htm':
    case 'html':
      $lang = 'markup';
      break;

    case 'php':
    case 'module':
    case 'inc':
    case 'install':
    case 'engine':
    case 'theme':
    case 'profile':
    case 'test':
      $lang = 'php';
      break;

    case 'twig':
      $lang = 'twig';
      break;

    default:
      $lang = 'none';
  }

  // Extract the links provided by the API module.
  $links = _db_api_process_links($code);

  // Construct the code tag.
  $code = array(
    '#theme' => 'html_tag__api__source__code',
    '#tag' => 'code',
    '#attributes' => array(
      'class' => array("language-$lang"),
    ),
    '#value' => $lang === 'markdown' ? htmlentities($code) : $code,
  );

  // Construct the build array.
  $build = array(
    'source' => array(
      '#theme' => 'html_tag__api__source',
      '#tag' => 'pre',
      '#attributes' => array(
        'class' => array('line-numbers', 'fade'),
        'data-links' => drupal_json_encode($links),
        'data-line' => '',
        'id' => drupal_html_id('source'),
      ),
      '#value' => drupal_render($code),
    ),
  );

  // Offset the start line for numbering.
  if (!empty($object->start_line)) {
    $build['source']['#attributes']['data-start'] = $object->start_line;
    $build['source']['#attributes']['data-line-offset'] = $object->start_line - 1;
  }

  // Wrap it with a panel if necessary.
  if ($panel && $object->object_type !== 'file') {
    $build['#theme_wrappers'] = array('fieldset__api__file_source');
    $build['#title'] = t('Source');
    $build['#collapsible'] = TRUE;
    $build['#collapsed'] = TRUE;
    $build['#id'] = 'source-wrapper';
  }

  // Build the re-formatted source code.
  return drupal_render($build);
}

/**
 * Re-formats the "documentation" for API templates.
 *
 * @param object $object
 *   The docblock object.
 * @param string $documentation
 *   The documentation string.
 *
 * @return string
 *   The re-formatted documentation.
 */
function _db_api_display_documentation($object, $documentation = NULL) {
  // Skip empty documentation and handle markdown files differently.
  if (!$documentation || preg_match('/\.md$/', $object->file_name)) {
    // Skip empty documentation or just show the source for markdown files.
    return !$documentation || $object->object_type === 'file' ? '' : $documentation;
  }

  if (preg_match_all('/<pre[^>]*><code[^>]*>([\w\W]*)<\/code><\/pre>/', $documentation, $matches, PREG_SET_ORDER)) {
    foreach ($matches as $match) {
      $documentation = preg_replace('/' . preg_quote($match[0], '/') . '/', "```php\n" . strip_tags($match[1]) . "\n```\n", $documentation);
    }
  }

  // Normalize the documentation.
  $documentation = _db_api_normalize_string($documentation);

  // Format the documentation for markdown.
  $documentation = commonmark_convert_to_html($documentation);

  // Process the links.
  _db_api_process_links($documentation, TRUE);

  return $documentation;
}

/**
 * Re-formats the "See Also" for API templates.
 *
 * @param string $see
 *   The $see string provided in the API template.
 *
 * @return string
 *   The re-formatted "See Also" list.
 */
function _db_api_display_see_also($see) {
  $build = array();
  _db_api_process_links($see, TRUE);
  if ($items = _db_api_normalize_string($see, TRUE, TRUE)) {
    $build = array(
      '#theme_wrappers' => array('container__alert__info'),
      '#theme' => 'item_list__alert',
      '#title' => t('See Also'),
      '#items' => $items,
    );
  }
  return drupal_render($build);
}

/**
 * Extracts the group and parent groups (if applicable) from a docblock.
 *
 * @param array $docblock
 *   The docblock array.
 * @param bool $parent_only
 *   Toggle determining whether or not to just return the parent group.
 *
 * @return string|FALSE
 *   The group or parent group. FALSE on error.
 */
function _db_api_find_group(array $docblock, $parent_only = FALSE) {
  $filename = preg_replace('/^(documentation|docs|doc)?\/?/', '', $docblock['file_name']);
  $paths = explode('/', $filename);
  $file = preg_replace('/\.md$/i', '', array_pop($paths));
  $parent_group = implode('_', $paths);
  if (empty($parent_group)) {
    $parent_group = FALSE;
  }
  elseif ($parent_only) {
    return $parent_group;
  }

  // If the file is named "readme" and it's located in a sub-directory (a.k.a.
  // $parent_group), then use it as the group name.
  if (preg_match('/^readme$/i', $file)) {
    if ($parent_group) {
      $group = $parent_group;
      $parent_group = FALSE;
    }
    else {
      return FALSE;
    }
  }
  else {
    $group = strtolower($file);
    $group = preg_replace('/\s+/', ' ', $group);
    $group = preg_replace('/[^a-z0-9_]/', '_', $group);
  }
  return $parent_group ? $parent_group . '_' . $group : $group;
}

/**
 * Extracts the links added by the API module.
 *
 * @param string $code
 *   The source code, passed by reference.
 * @param bool $replace
 *   Toggle determining whether or not to replace the links found.
 *
 * @return array
 *   An array of extracted links where attributes are the values, keyed by
 *   the link display text.
 */
function _db_api_process_links(&$code, $replace = FALSE) {
  global $base_url;
  $links = array();
  if (preg_match_all('/<a [^>]+>[^<]+<\/a>/', $code, $matches, PREG_SET_ORDER)) {
    foreach ($matches as $match) {
      $link = (array) new SimpleXMLIterator($match[0]);
      $title = $link[0];
      if (!isset($links[$title])) {
        foreach ($link['@attributes'] as $name => &$value) {
          if ($name === 'href') {
            $value = url(urldecode($value), array('absolute' => TRUE));
            if (strpos($value, $base_url) === FALSE) {
              $link['@attributes']['target'] = '_blank';
            }
            else {
              $value = str_replace($base_url, '', $value);
            }
          }
          if (empty($value)) {
            unset($link['@attributes'][$name]);
          }
        }
        if ($replace) {
          _db_api_replace_preg_match($code, $match, '<a ' . drupal_attributes($link['@attributes']) . ">$title</a>");
        }
        $links[$title] = $link['@attributes'];
      }
    }
  }
  return $links;
}

/**
 * Normalizes text output from the API module.
 *
 * @param string $string
 *   The string to normalize.
 * @param bool $remove_autop
 *   Toggle determining whether or not to remove the <p> tags injected by API.
 * @param bool $array
 *   Toggle determining whether or not to split the string by newline.
 *
 * @return string|array
 *   The normalized string or array of strings if $array is set to TRUE.
 */
function _db_api_normalize_string($string, $remove_autop = TRUE, $array = FALSE) {
  $string = html_entity_decode(decode_entities($string));
  if ($remove_autop) {
    $string = preg_replace('/(<p[^>]*>)/', '', preg_replace('/<\/p>/', "\n", $string));
  }
  return $array ? array_filter(explode("\n", $string)) : $string;
}

/*****************************************************************************
 * Hooks and alters.
 *****************************************************************************/

/**
 * Implements hook_api_parse_functions_alter().
 */
function db_api_api_parse_functions_alter(array &$parse_functions) {
  $parse_functions['md'] = 'db_api_parse_md_file';
}

/**
 * Implements hook_menu_alter().
 */
function db_api_menu_alter(&$items) {
  $items['api/%api_project']['title'] = t('Documentation');
  $items['api/%api_project/%api_branch']['type'] = MENU_NORMAL_ITEM;
}

/*****************************************************************************
 * Callbacks functions.
 *****************************************************************************/

/**
 * Callback for parsing "md" file types.
 *
 * @param array $docblock
 *   Array from api_parse_file() containing the file contents and information
 *   about the file, branch, etc.
 */
function db_api_parse_md_file(array $docblock) {
  // Reference the original source.
  $source = $docblock['source'];
  $documentation = $source;

  // Set start_line to 0 initially.
  $docblock['start_line'] = 0;

  // API uses the file basename as the title by default. Attempt to find the
  // first H1 (#) in the file and use that as the title instead.
  if (preg_match("/# ([^\n]+)\n/Us", $source, $matches)) {
    _db_api_replace_preg_match($documentation, $matches);
    $docblock['title'] = check_plain($matches[1]);
  }

  // Find and parse all HTML comments that start with "@" as DOXYGEN keywords.
  if (preg_match_all("/<!-- @([a-z_-]++)\\s??([\\w\\W]*)\\s??-->(\n)?/U", $source, $matches, PREG_SET_ORDER)) {
    foreach ($matches as $match) {
      $keyword = $match[1];
      $value = check_plain(trim(str_replace("@end$keyword", '', $match[2])));
      $parts = array_filter(explode(' ', $value));
      $newline = $match[3];
      switch ($keyword) {
        case 'link':
          module_load_include('inc', 'api', 'api.formatting');
          $link = api_link_link($value, $docblock['branch']);
          if (preg_match('/href="([^"]+)"[^>]+>([^<]+)/', $link, $link_matches)) {
            $url = $link_matches[1];
            $title = $link_matches[2];
            _db_api_replace_preg_match($documentation, $match, "[$title]($url)$newline");
          }
          break;

        case 'url':
          module_load_include('inc', 'api', 'api.formatting');

          // Parse anchors attached to the object name.
          $anchor = '';
          if (strpos($value, '#') !== FALSE) {
            $words = preg_split('/\s+/', trim($value));
            $parts = explode('#', array_shift($words));
            $name = array_shift($parts);
            if ($parts) {
              $anchor = '#' . drupal_clean_css_identifier(implode('#', $parts));
            }
            $link = api_link_name($name, $docblock['branch'], '', '', NULL, NULL, implode(' ', $words), TRUE);
          }
          else {
            $link = api_link_link($value, $docblock['branch']);
          }

          if (preg_match('/href="([^"]+)"/', $link, $link_matches)) {
            $url = $link_matches[1] . $anchor;
            _db_api_replace_preg_match($documentation, $match, "$url$newline");
          }
          break;

        case 'file':
          $docblock['summary'] = $value;
          break;

        case 'mainpage':
          // Extract the title.
          if (empty($value)) {
            $value = $docblock['title'];
          }
          $docblock['content'] .= "@mainpage $value\n";
          break;

        case 'addtogroup':
        case 'defgroup':
        case 'ingroup':
          $group = array_shift($parts);

          // If no group was explicitly specified, attempt to dynamically
          // extract the group based on the filename and path.
          if (!$group) {
            $group = _db_api_find_group($docblock, $keyword !== 'defgroup');
          }

          // Add the group definition so API will parse it.
          if ($keyword === 'defgroup') {
            // Extract the group title (only for @defgroup).
            $group_title = check_plain(implode(' ', array_filter($parts)));
            if (empty($group_title)) {
              $group_title = $docblock['title'];
            }
            $docblock['content'] .= "@$keyword $group $group_title\n";
          }
          elseif ($group) {
            if (!preg_match('/[a-zA-Z0-9_\.-]+/Us', $group)) {
              $original_group = $group;
              $group = preg_replace('/[^a-zA-Z0-9_\.-]/', '', $group);
              watchdog('api', 'Invalid group specified for @@keyword in %file: "!original_group" Automatically converted to: "!group".', array(
                '@keyword' => $keyword,
                '%file' => $docblock['file_name'],
                '!original_group' => $original_group,
                '!group' => $group,
              ), WATCHDOG_WARNING);

            }
            $docblock['content'] .= "@$keyword $group\n";
          }
          else {
            watchdog('api', 'No group specified for @@keyword in %file.', array(
              '@keyword' => $keyword,
              '%file' => $docblock['file_name'],
            ), WATCHDOG_WARNING);
          }
          break;
      }

      // Ensure comment is removed from the documentation.
      _db_api_replace_preg_match($documentation, $match);
    }
  }

  // Parse the documentation.
  $docblock['documentation'] = commonmark_convert_to_html(trim($documentation));

  // Wrap the source code.
  $docblock['code'] = '<pre class="php"><code>' . trim($source) . '</code></pre>';

  // Save the docblock.
  api_save_documentation(array($docblock));
}
